<?php

namespace Curl;

use PHPUnit\Framework\TestCase;
use Surreal\Core\Client\SurrealHTTP;
use Surreal\Curl\HttpHeader;
use Surreal\Exceptions\SurrealException;

class HttpHeaderTest extends TestCase
{
    public static function setUpBeforeClass(): void
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
    }

    /**
     * @throws SurrealException
     */
    public function testDatabaseHeader()
    {
        $instance = new SurrealHTTP(
            host: "http://localhost:8000",
            target: [
                "namespace" => "test"
            ]
        );

        try {
            HttpHeader::create($instance)
                ->setAcceptHeader("application/cbor")
                ->setNamespaceHeader(true)
                ->setDatabaseHeader(true)
                ->getHeaders();
        } catch (SurrealException $exception) {
            $this->assertInstanceOf(SurrealException::class, $exception);
        }

        $headers = HttpHeader::create($instance)
            ->setAcceptHeader("application/cbor")
            ->setNamespaceHeader(true)
            ->setDatabaseHeader(true, "test")
            ->getHeaders();

        $this->assertIsArray($headers);
        $this->assertEquals([
            "Accept: application/cbor",
            "Surreal-NS: test",
            "Surreal-DB: test"
        ], $headers);

        $instance->setDatabase("test");

        $headers = HttpHeader::create($instance)
            ->setAcceptHeader("application/cbor")
            ->setNamespaceHeader(true)
            ->setDatabaseHeader(true)
            ->getHeaders();

        $this->assertIsArray($headers);
        $this->assertEquals([
            "Accept: application/cbor",
            "Surreal-NS: test",
            "Surreal-DB: test"
        ], $headers);
    }

    /**
     * @throws SurrealException
     */
    public function testNamespaceHeader()
    {
        $instance = new SurrealHTTP(
            host: "http://localhost:8000",
            target: [
                "database" => "test"
            ]
        );

        try {
            HttpHeader::create($instance)
                ->setAcceptHeader("application/cbor")
                ->setDatabaseHeader(true)
                ->getHeaders();
        } catch (SurrealException $exception) {
            $this->assertInstanceOf(SurrealException::class, $exception);
        }

        $headers = HttpHeader::create($instance)
            ->setAcceptHeader("application/cbor")
            ->setNamespaceHeader(true, "test")
            ->setDatabaseHeader(true)
            ->getHeaders();

        $this->assertIsArray($headers);
        $this->assertEquals([
            "Accept: application/cbor",
            "Surreal-NS: test",
            "Surreal-DB: test"
        ], $headers);

        $instance->setNamespace("test");

        $headers = HttpHeader::create($instance)
            ->setAcceptHeader("application/cbor")
            ->setNamespaceHeader(true, "test")
            ->setDatabaseHeader(true)
            ->getHeaders();

        $this->assertIsArray($headers);
        $this->assertEquals([
            "Accept: application/cbor",
            "Surreal-NS: test",
            "Surreal-DB: test"
        ], $headers);
    }

    /**
     * @throws SurrealException
     */
    public function testScopeHeader()
    {
        $instance = new SurrealHTTP(
            host: "http://localhost:8000",
            target: [
                "namespace" => "test",
                "database" => "test"
            ]
        );

        try {
            HttpHeader::create($instance)
                ->setAcceptHeader("application/cbor")
                ->setNamespaceHeader(true)
                ->setDatabaseHeader(true)
                ->getHeaders();
        } catch (SurrealException $exception) {
            $this->assertInstanceOf(SurrealException::class, $exception);
        }

        $headers = HttpHeader::create($instance)
            ->setAcceptHeader("application/cbor")
            ->setNamespaceHeader(true)
            ->setDatabaseHeader(true)
            ->setScopeHeader(true, "test")
            ->getHeaders();

        $this->assertIsArray($headers);
        $this->assertEquals([
            "Accept: application/cbor",
            "Surreal-NS: test",
            "Surreal-DB: test",
            "Surreal-SC: test"
        ], $headers);

        $instance->auth->setScope("test");

        $headers = HttpHeader::create($instance)
            ->setAcceptHeader("application/cbor")
            ->setNamespaceHeader(true)
            ->setDatabaseHeader(true)
            ->setScopeHeader(true)
            ->getHeaders();

        $this->assertIsArray($headers);
        $this->assertEquals([
            "Accept: application/cbor",
            "Surreal-NS: test",
            "Surreal-DB: test",
            "Surreal-SC: test"
        ], $headers);
    }

    /**
     * @throws SurrealException
     */
    public function testAuthHeader(): void
    {
        $instance = new SurrealHTTP(
            host: "http://localhost:8000",
            target: [
                "namespace" => "test",
                "database" => "test"
            ]
        );

        $instance->auth->setToken("test");
        $instance->auth->setScope("test");

        $headers = HttpHeader::create($instance)
            ->setAcceptHeader("application/cbor")
            ->setNamespaceHeader(true)
            ->setDatabaseHeader(true)
            ->setScopeHeader(false)
            ->setAuthorizationHeader()
            ->getHeaders();

        $this->assertIsArray($headers);
        $this->assertEquals([
            "Accept: application/cbor",
            "Surreal-NS: test",
            "Surreal-DB: test",
            "Surreal-SC: test",
            "Authorization: Bearer test"
        ], $headers);
    }

    public function testRequiredHeaders(): void
    {
        $instance = new SurrealHTTP(
            host: "http://localhost:8000",
            target: []
        );

        try {
            HttpHeader::create($instance)
                ->setNamespaceHeader(true)
                ->setDatabaseHeader(true)
                ->getHeaders();
        } catch (SurrealException $exception) {
            $this->assertInstanceOf(SurrealException::class, $exception);
        }
    }
}